# Generated from OGCode.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,414,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,
        1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,5,20,146,8,20,10,20,
        12,20,149,9,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,157,8,21,10,21,
        12,21,160,9,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,
        1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,
        1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,3,38,383,8,38,1,39,1,39,5,39,387,8,39,10,39,12,39,
        390,9,39,1,40,3,40,393,8,40,1,40,4,40,396,8,40,11,40,12,40,397,1,
        40,1,40,4,40,402,8,40,11,40,12,40,403,3,40,406,8,40,1,41,4,41,409,
        8,41,11,41,12,41,410,1,41,1,41,1,158,0,42,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,1,0,5,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,
        0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,438,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
        0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,89,1,0,0,0,7,91,1,
        0,0,0,9,93,1,0,0,0,11,95,1,0,0,0,13,97,1,0,0,0,15,100,1,0,0,0,17,
        103,1,0,0,0,19,106,1,0,0,0,21,109,1,0,0,0,23,111,1,0,0,0,25,113,
        1,0,0,0,27,116,1,0,0,0,29,119,1,0,0,0,31,123,1,0,0,0,33,126,1,0,
        0,0,35,131,1,0,0,0,37,137,1,0,0,0,39,139,1,0,0,0,41,141,1,0,0,0,
        43,152,1,0,0,0,45,166,1,0,0,0,47,168,1,0,0,0,49,170,1,0,0,0,51,172,
        1,0,0,0,53,174,1,0,0,0,55,176,1,0,0,0,57,178,1,0,0,0,59,187,1,0,
        0,0,61,191,1,0,0,0,63,198,1,0,0,0,65,204,1,0,0,0,67,207,1,0,0,0,
        69,212,1,0,0,0,71,219,1,0,0,0,73,226,1,0,0,0,75,232,1,0,0,0,77,382,
        1,0,0,0,79,384,1,0,0,0,81,392,1,0,0,0,83,408,1,0,0,0,85,86,5,61,
        0,0,86,2,1,0,0,0,87,88,5,43,0,0,88,4,1,0,0,0,89,90,5,45,0,0,90,6,
        1,0,0,0,91,92,5,42,0,0,92,8,1,0,0,0,93,94,5,47,0,0,94,10,1,0,0,0,
        95,96,5,37,0,0,96,12,1,0,0,0,97,98,5,43,0,0,98,99,5,43,0,0,99,14,
        1,0,0,0,100,101,5,45,0,0,101,102,5,45,0,0,102,16,1,0,0,0,103,104,
        5,61,0,0,104,105,5,61,0,0,105,18,1,0,0,0,106,107,5,33,0,0,107,108,
        5,61,0,0,108,20,1,0,0,0,109,110,5,60,0,0,110,22,1,0,0,0,111,112,
        5,62,0,0,112,24,1,0,0,0,113,114,5,60,0,0,114,115,5,61,0,0,115,26,
        1,0,0,0,116,117,5,62,0,0,117,118,5,61,0,0,118,28,1,0,0,0,119,120,
        5,97,0,0,120,121,5,110,0,0,121,122,5,100,0,0,122,30,1,0,0,0,123,
        124,5,111,0,0,124,125,5,114,0,0,125,32,1,0,0,0,126,127,5,84,0,0,
        127,128,5,114,0,0,128,129,5,117,0,0,129,130,5,101,0,0,130,34,1,0,
        0,0,131,132,5,70,0,0,132,133,5,97,0,0,133,134,5,108,0,0,134,135,
        5,115,0,0,135,136,5,101,0,0,136,36,1,0,0,0,137,138,5,44,0,0,138,
        38,1,0,0,0,139,140,5,59,0,0,140,40,1,0,0,0,141,142,5,47,0,0,142,
        143,5,47,0,0,143,147,1,0,0,0,144,146,8,0,0,0,145,144,1,0,0,0,146,
        149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,
        147,1,0,0,0,150,151,6,20,0,0,151,42,1,0,0,0,152,153,5,47,0,0,153,
        154,5,42,0,0,154,158,1,0,0,0,155,157,9,0,0,0,156,155,1,0,0,0,157,
        160,1,0,0,0,158,159,1,0,0,0,158,156,1,0,0,0,159,161,1,0,0,0,160,
        158,1,0,0,0,161,162,5,42,0,0,162,163,5,47,0,0,163,164,1,0,0,0,164,
        165,6,21,0,0,165,44,1,0,0,0,166,167,5,91,0,0,167,46,1,0,0,0,168,
        169,5,93,0,0,169,48,1,0,0,0,170,171,5,40,0,0,171,50,1,0,0,0,172,
        173,5,41,0,0,173,52,1,0,0,0,174,175,5,123,0,0,175,54,1,0,0,0,176,
        177,5,125,0,0,177,56,1,0,0,0,178,179,5,102,0,0,179,180,5,117,0,0,
        180,181,5,110,0,0,181,182,5,99,0,0,182,183,5,116,0,0,183,184,5,105,
        0,0,184,185,5,111,0,0,185,186,5,110,0,0,186,58,1,0,0,0,187,188,5,
        108,0,0,188,189,5,101,0,0,189,190,5,116,0,0,190,60,1,0,0,0,191,192,
        5,114,0,0,192,193,5,101,0,0,193,194,5,112,0,0,194,195,5,101,0,0,
        195,196,5,97,0,0,196,197,5,116,0,0,197,62,1,0,0,0,198,199,5,119,
        0,0,199,200,5,104,0,0,200,201,5,105,0,0,201,202,5,108,0,0,202,203,
        5,101,0,0,203,64,1,0,0,0,204,205,5,105,0,0,205,206,5,102,0,0,206,
        66,1,0,0,0,207,208,5,101,0,0,208,209,5,108,0,0,209,210,5,115,0,0,
        210,211,5,101,0,0,211,68,1,0,0,0,212,213,5,101,0,0,213,214,5,108,
        0,0,214,215,5,115,0,0,215,216,5,101,0,0,216,217,5,105,0,0,217,218,
        5,102,0,0,218,70,1,0,0,0,219,220,5,114,0,0,220,221,5,101,0,0,221,
        222,5,116,0,0,222,223,5,117,0,0,223,224,5,114,0,0,224,225,5,110,
        0,0,225,72,1,0,0,0,226,227,5,98,0,0,227,228,5,114,0,0,228,229,5,
        101,0,0,229,230,5,97,0,0,230,231,5,107,0,0,231,74,1,0,0,0,232,233,
        5,115,0,0,233,234,5,116,0,0,234,235,5,97,0,0,235,236,5,114,0,0,236,
        237,5,116,0,0,237,76,1,0,0,0,238,239,5,102,0,0,239,240,5,111,0,0,
        240,241,5,114,0,0,241,242,5,119,0,0,242,243,5,97,0,0,243,244,5,114,
        0,0,244,383,5,100,0,0,245,246,5,109,0,0,246,247,5,111,0,0,247,248,
        5,118,0,0,248,383,5,101,0,0,249,250,5,116,0,0,250,251,5,117,0,0,
        251,252,5,114,0,0,252,383,5,110,0,0,253,254,5,112,0,0,254,255,5,
        101,0,0,255,256,5,110,0,0,256,257,5,85,0,0,257,383,5,112,0,0,258,
        259,5,112,0,0,259,260,5,101,0,0,260,261,5,110,0,0,261,262,5,68,0,
        0,262,263,5,111,0,0,263,264,5,119,0,0,264,383,5,110,0,0,265,266,
        5,115,0,0,266,267,5,101,0,0,267,268,5,116,0,0,268,269,5,83,0,0,269,
        270,5,112,0,0,270,271,5,101,0,0,271,272,5,101,0,0,272,383,5,100,
        0,0,273,274,5,115,0,0,274,275,5,101,0,0,275,276,5,116,0,0,276,277,
        5,80,0,0,277,278,5,101,0,0,278,279,5,110,0,0,279,280,5,84,0,0,280,
        281,5,101,0,0,281,282,5,109,0,0,282,383,5,112,0,0,283,284,5,99,0,
        0,284,285,5,105,0,0,285,286,5,114,0,0,286,287,5,99,0,0,287,288,5,
        108,0,0,288,383,5,101,0,0,289,290,5,119,0,0,290,291,5,97,0,0,291,
        292,5,105,0,0,292,383,5,116,0,0,293,294,5,99,0,0,294,295,5,108,0,
        0,295,296,5,101,0,0,296,297,5,97,0,0,297,298,5,110,0,0,298,299,5,
        78,0,0,299,300,5,111,0,0,300,301,5,122,0,0,301,302,5,122,0,0,302,
        303,5,108,0,0,303,383,5,101,0,0,304,305,5,103,0,0,305,306,5,114,
        0,0,306,307,5,111,0,0,307,308,5,117,0,0,308,309,5,110,0,0,309,383,
        5,100,0,0,310,311,5,117,0,0,311,312,5,110,0,0,312,313,5,105,0,0,
        313,383,5,116,0,0,314,315,5,97,0,0,315,316,5,117,0,0,316,317,5,116,
        0,0,317,318,5,111,0,0,318,319,5,76,0,0,319,320,5,101,0,0,320,321,
        5,118,0,0,321,322,5,101,0,0,322,383,5,108,0,0,323,324,5,115,0,0,
        324,325,5,101,0,0,325,326,5,116,0,0,326,327,5,84,0,0,327,328,5,97,
        0,0,328,329,5,98,0,0,329,330,5,108,0,0,330,331,5,101,0,0,331,332,
        5,84,0,0,332,333,5,101,0,0,333,334,5,109,0,0,334,383,5,112,0,0,335,
        336,5,99,0,0,336,337,5,111,0,0,337,338,5,111,0,0,338,339,5,108,0,
        0,339,340,5,101,0,0,340,383,5,114,0,0,341,342,5,97,0,0,342,343,5,
        98,0,0,343,344,5,115,0,0,344,345,5,111,0,0,345,346,5,108,0,0,346,
        347,5,117,0,0,347,348,5,116,0,0,348,349,5,101,0,0,349,350,5,80,0,
        0,350,351,5,111,0,0,351,352,5,115,0,0,352,353,5,105,0,0,353,354,
        5,116,0,0,354,355,5,105,0,0,355,356,5,111,0,0,356,357,5,110,0,0,
        357,358,5,105,0,0,358,359,5,110,0,0,359,383,5,103,0,0,360,361,5,
        102,0,0,361,362,5,105,0,0,362,363,5,108,0,0,363,364,5,108,0,0,364,
        365,5,101,0,0,365,366,5,100,0,0,366,367,5,67,0,0,367,368,5,105,0,
        0,368,369,5,114,0,0,369,370,5,99,0,0,370,371,5,108,0,0,371,383,5,
        101,0,0,372,373,5,100,0,0,373,374,5,114,0,0,374,375,5,97,0,0,375,
        376,5,119,0,0,376,377,5,76,0,0,377,378,5,101,0,0,378,379,5,116,0,
        0,379,380,5,116,0,0,380,381,5,101,0,0,381,383,5,114,0,0,382,238,
        1,0,0,0,382,245,1,0,0,0,382,249,1,0,0,0,382,253,1,0,0,0,382,258,
        1,0,0,0,382,265,1,0,0,0,382,273,1,0,0,0,382,283,1,0,0,0,382,289,
        1,0,0,0,382,293,1,0,0,0,382,304,1,0,0,0,382,310,1,0,0,0,382,314,
        1,0,0,0,382,323,1,0,0,0,382,335,1,0,0,0,382,341,1,0,0,0,382,360,
        1,0,0,0,382,372,1,0,0,0,383,78,1,0,0,0,384,388,7,1,0,0,385,387,7,
        2,0,0,386,385,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,
        0,0,0,389,80,1,0,0,0,390,388,1,0,0,0,391,393,5,45,0,0,392,391,1,
        0,0,0,392,393,1,0,0,0,393,395,1,0,0,0,394,396,7,3,0,0,395,394,1,
        0,0,0,396,397,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,405,1,
        0,0,0,399,401,5,46,0,0,400,402,7,3,0,0,401,400,1,0,0,0,402,403,1,
        0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,399,1,
        0,0,0,405,406,1,0,0,0,406,82,1,0,0,0,407,409,7,4,0,0,408,407,1,0,
        0,0,409,410,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,412,1,0,
        0,0,412,413,6,41,0,0,413,84,1,0,0,0,10,0,147,158,382,388,392,397,
        403,405,410,1,6,0,0
    ]

class OGCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ASSIGNMENT_OPERATOR = 1
    PLUS_OPERATOR = 2
    MINUS_OPERATOR = 3
    MULTIPLY_OPERATOR = 4
    DIVIDE_OPERATOR = 5
    MODULO_OPERATOR = 6
    INCREMENT_OPERATOR = 7
    DECREMENT_OPERATOR = 8
    EQUAL_OPERATOR = 9
    UNEQUAL_OPERATOR = 10
    LESSER_OPERATOR = 11
    GREATER_OPERATOR = 12
    LESSER_OR_EQUAL_OPERATOR = 13
    GREATER_OR_EQUAL_OPERATOR = 14
    AND_KEYWORD = 15
    OR_KEYWORD = 16
    BOOLEAN_TRUE = 17
    BOOLEAN_FALSE = 18
    COMMA_SEPARATOR = 19
    SEMICOLON_SEPARATOR = 20
    LINE_COMMENT = 21
    BLOCK_COMMENT = 22
    LEFT_BRACKET = 23
    RIGHT_BRACKET = 24
    LEFT_PARENTHESIS = 25
    RIGHT_PARENTHESIS = 26
    LEFT_BRACE = 27
    RIGHT_BRACE = 28
    FUNCTION_KEYWORD = 29
    LET_KEYWORD = 30
    REPEAT_KEYWORD = 31
    WHILE_KEYWORD = 32
    IF_KEYWORD = 33
    ELSE_KEYWORD = 34
    ELSEIF_KEYWORD = 35
    RETURN_KEYWORD = 36
    BREAK_KEYWORD = 37
    START_KEYWORD = 38
    FUNCTIONS_KEYWORDS = 39
    IDENTIFIER = 40
    NUMBER = 41
    WS = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'=='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'and'", "'or'", "'True'", 
            "'False'", "','", "';'", "'['", "']'", "'('", "')'", "'{'", 
            "'}'", "'function'", "'let'", "'repeat'", "'while'", "'if'", 
            "'else'", "'elseif'", "'return'", "'break'", "'start'" ]

    symbolicNames = [ "<INVALID>",
            "ASSIGNMENT_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", "MULTIPLY_OPERATOR", 
            "DIVIDE_OPERATOR", "MODULO_OPERATOR", "INCREMENT_OPERATOR", 
            "DECREMENT_OPERATOR", "EQUAL_OPERATOR", "UNEQUAL_OPERATOR", 
            "LESSER_OPERATOR", "GREATER_OPERATOR", "LESSER_OR_EQUAL_OPERATOR", 
            "GREATER_OR_EQUAL_OPERATOR", "AND_KEYWORD", "OR_KEYWORD", "BOOLEAN_TRUE", 
            "BOOLEAN_FALSE", "COMMA_SEPARATOR", "SEMICOLON_SEPARATOR", "LINE_COMMENT", 
            "BLOCK_COMMENT", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_PARENTHESIS", 
            "RIGHT_PARENTHESIS", "LEFT_BRACE", "RIGHT_BRACE", "FUNCTION_KEYWORD", 
            "LET_KEYWORD", "REPEAT_KEYWORD", "WHILE_KEYWORD", "IF_KEYWORD", 
            "ELSE_KEYWORD", "ELSEIF_KEYWORD", "RETURN_KEYWORD", "BREAK_KEYWORD", 
            "START_KEYWORD", "FUNCTIONS_KEYWORDS", "IDENTIFIER", "NUMBER", 
            "WS" ]

    ruleNames = [ "ASSIGNMENT_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", 
                  "MULTIPLY_OPERATOR", "DIVIDE_OPERATOR", "MODULO_OPERATOR", 
                  "INCREMENT_OPERATOR", "DECREMENT_OPERATOR", "EQUAL_OPERATOR", 
                  "UNEQUAL_OPERATOR", "LESSER_OPERATOR", "GREATER_OPERATOR", 
                  "LESSER_OR_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                  "AND_KEYWORD", "OR_KEYWORD", "BOOLEAN_TRUE", "BOOLEAN_FALSE", 
                  "COMMA_SEPARATOR", "SEMICOLON_SEPARATOR", "LINE_COMMENT", 
                  "BLOCK_COMMENT", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_PARENTHESIS", 
                  "RIGHT_PARENTHESIS", "LEFT_BRACE", "RIGHT_BRACE", "FUNCTION_KEYWORD", 
                  "LET_KEYWORD", "REPEAT_KEYWORD", "WHILE_KEYWORD", "IF_KEYWORD", 
                  "ELSE_KEYWORD", "ELSEIF_KEYWORD", "RETURN_KEYWORD", "BREAK_KEYWORD", 
                  "START_KEYWORD", "FUNCTIONS_KEYWORDS", "IDENTIFIER", "NUMBER", 
                  "WS" ]

    grammarFileName = "OGCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


