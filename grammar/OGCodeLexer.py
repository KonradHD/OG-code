# Generated from OGCode.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,435,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,
        1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,20,1,20,5,20,144,8,20,10,20,12,20,147,
        9,20,1,21,1,21,1,21,1,21,5,21,153,8,21,10,21,12,21,156,9,21,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
        1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,
        1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,3,36,395,8,36,1,37,1,37,5,37,399,8,37,10,37,12,37,402,
        9,37,1,38,3,38,405,8,38,1,38,4,38,408,8,38,11,38,12,38,409,1,38,
        1,38,4,38,414,8,38,11,38,12,38,415,3,38,418,8,38,1,39,4,39,421,8,
        39,11,39,12,39,422,1,39,1,39,1,40,1,40,5,40,429,8,40,10,40,12,40,
        432,9,40,1,40,1,40,1,154,0,41,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
        1,0,6,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,3,0,10,10,13,13,39,39,463,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,1,83,1,0,0,0,3,85,1,0,0,0,5,87,1,0,0,0,7,89,1,0,0,0,9,91,
        1,0,0,0,11,93,1,0,0,0,13,95,1,0,0,0,15,98,1,0,0,0,17,101,1,0,0,0,
        19,104,1,0,0,0,21,107,1,0,0,0,23,109,1,0,0,0,25,111,1,0,0,0,27,114,
        1,0,0,0,29,117,1,0,0,0,31,121,1,0,0,0,33,124,1,0,0,0,35,129,1,0,
        0,0,37,135,1,0,0,0,39,137,1,0,0,0,41,139,1,0,0,0,43,148,1,0,0,0,
        45,160,1,0,0,0,47,162,1,0,0,0,49,164,1,0,0,0,51,166,1,0,0,0,53,168,
        1,0,0,0,55,170,1,0,0,0,57,172,1,0,0,0,59,181,1,0,0,0,61,185,1,0,
        0,0,63,192,1,0,0,0,65,198,1,0,0,0,67,201,1,0,0,0,69,206,1,0,0,0,
        71,213,1,0,0,0,73,394,1,0,0,0,75,396,1,0,0,0,77,404,1,0,0,0,79,420,
        1,0,0,0,81,426,1,0,0,0,83,84,5,61,0,0,84,2,1,0,0,0,85,86,5,43,0,
        0,86,4,1,0,0,0,87,88,5,45,0,0,88,6,1,0,0,0,89,90,5,42,0,0,90,8,1,
        0,0,0,91,92,5,47,0,0,92,10,1,0,0,0,93,94,5,37,0,0,94,12,1,0,0,0,
        95,96,5,43,0,0,96,97,5,43,0,0,97,14,1,0,0,0,98,99,5,45,0,0,99,100,
        5,45,0,0,100,16,1,0,0,0,101,102,5,61,0,0,102,103,5,61,0,0,103,18,
        1,0,0,0,104,105,5,33,0,0,105,106,5,61,0,0,106,20,1,0,0,0,107,108,
        5,60,0,0,108,22,1,0,0,0,109,110,5,62,0,0,110,24,1,0,0,0,111,112,
        5,60,0,0,112,113,5,61,0,0,113,26,1,0,0,0,114,115,5,62,0,0,115,116,
        5,61,0,0,116,28,1,0,0,0,117,118,5,97,0,0,118,119,5,110,0,0,119,120,
        5,100,0,0,120,30,1,0,0,0,121,122,5,111,0,0,122,123,5,114,0,0,123,
        32,1,0,0,0,124,125,5,116,0,0,125,126,5,114,0,0,126,127,5,117,0,0,
        127,128,5,101,0,0,128,34,1,0,0,0,129,130,5,102,0,0,130,131,5,97,
        0,0,131,132,5,108,0,0,132,133,5,115,0,0,133,134,5,101,0,0,134,36,
        1,0,0,0,135,136,5,44,0,0,136,38,1,0,0,0,137,138,5,59,0,0,138,40,
        1,0,0,0,139,140,5,47,0,0,140,141,5,47,0,0,141,145,1,0,0,0,142,144,
        8,0,0,0,143,142,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,
        1,0,0,0,146,42,1,0,0,0,147,145,1,0,0,0,148,149,5,47,0,0,149,150,
        5,42,0,0,150,154,1,0,0,0,151,153,9,0,0,0,152,151,1,0,0,0,153,156,
        1,0,0,0,154,155,1,0,0,0,154,152,1,0,0,0,155,157,1,0,0,0,156,154,
        1,0,0,0,157,158,5,42,0,0,158,159,5,47,0,0,159,44,1,0,0,0,160,161,
        5,91,0,0,161,46,1,0,0,0,162,163,5,93,0,0,163,48,1,0,0,0,164,165,
        5,40,0,0,165,50,1,0,0,0,166,167,5,41,0,0,167,52,1,0,0,0,168,169,
        5,123,0,0,169,54,1,0,0,0,170,171,5,125,0,0,171,56,1,0,0,0,172,173,
        5,102,0,0,173,174,5,117,0,0,174,175,5,110,0,0,175,176,5,99,0,0,176,
        177,5,116,0,0,177,178,5,105,0,0,178,179,5,111,0,0,179,180,5,110,
        0,0,180,58,1,0,0,0,181,182,5,108,0,0,182,183,5,101,0,0,183,184,5,
        116,0,0,184,60,1,0,0,0,185,186,5,114,0,0,186,187,5,101,0,0,187,188,
        5,112,0,0,188,189,5,101,0,0,189,190,5,97,0,0,190,191,5,116,0,0,191,
        62,1,0,0,0,192,193,5,119,0,0,193,194,5,104,0,0,194,195,5,105,0,0,
        195,196,5,108,0,0,196,197,5,101,0,0,197,64,1,0,0,0,198,199,5,105,
        0,0,199,200,5,102,0,0,200,66,1,0,0,0,201,202,5,101,0,0,202,203,5,
        108,0,0,203,204,5,115,0,0,204,205,5,101,0,0,205,68,1,0,0,0,206,207,
        5,101,0,0,207,208,5,108,0,0,208,209,5,115,0,0,209,210,5,101,0,0,
        210,211,5,105,0,0,211,212,5,102,0,0,212,70,1,0,0,0,213,214,5,115,
        0,0,214,215,5,116,0,0,215,216,5,97,0,0,216,217,5,114,0,0,217,218,
        5,116,0,0,218,72,1,0,0,0,219,220,5,102,0,0,220,221,5,111,0,0,221,
        222,5,114,0,0,222,223,5,119,0,0,223,224,5,97,0,0,224,225,5,114,0,
        0,225,395,5,100,0,0,226,227,5,109,0,0,227,228,5,111,0,0,228,229,
        5,118,0,0,229,395,5,101,0,0,230,231,5,116,0,0,231,232,5,117,0,0,
        232,233,5,114,0,0,233,395,5,110,0,0,234,235,5,112,0,0,235,236,5,
        101,0,0,236,237,5,110,0,0,237,238,5,85,0,0,238,395,5,112,0,0,239,
        240,5,112,0,0,240,241,5,101,0,0,241,242,5,110,0,0,242,243,5,68,0,
        0,243,244,5,111,0,0,244,245,5,119,0,0,245,395,5,110,0,0,246,247,
        5,115,0,0,247,248,5,101,0,0,248,249,5,116,0,0,249,250,5,80,0,0,250,
        251,5,101,0,0,251,252,5,110,0,0,252,253,5,84,0,0,253,254,5,101,0,
        0,254,255,5,109,0,0,255,395,5,112,0,0,256,257,5,99,0,0,257,258,5,
        105,0,0,258,259,5,114,0,0,259,260,5,99,0,0,260,261,5,108,0,0,261,
        395,5,101,0,0,262,263,5,119,0,0,263,264,5,97,0,0,264,265,5,105,0,
        0,265,395,5,116,0,0,266,267,5,99,0,0,267,268,5,108,0,0,268,269,5,
        101,0,0,269,270,5,97,0,0,270,271,5,110,0,0,271,272,5,78,0,0,272,
        273,5,111,0,0,273,274,5,122,0,0,274,275,5,122,0,0,275,276,5,108,
        0,0,276,395,5,101,0,0,277,278,5,103,0,0,278,279,5,114,0,0,279,280,
        5,111,0,0,280,281,5,117,0,0,281,282,5,110,0,0,282,395,5,100,0,0,
        283,284,5,117,0,0,284,285,5,110,0,0,285,286,5,105,0,0,286,395,5,
        116,0,0,287,288,5,97,0,0,288,289,5,117,0,0,289,290,5,116,0,0,290,
        291,5,111,0,0,291,292,5,76,0,0,292,293,5,101,0,0,293,294,5,118,0,
        0,294,295,5,101,0,0,295,395,5,108,0,0,296,297,5,115,0,0,297,298,
        5,101,0,0,298,299,5,116,0,0,299,300,5,65,0,0,300,301,5,110,0,0,301,
        302,5,103,0,0,302,303,5,108,0,0,303,395,5,101,0,0,304,305,5,115,
        0,0,305,306,5,101,0,0,306,307,5,116,0,0,307,308,5,84,0,0,308,309,
        5,97,0,0,309,310,5,98,0,0,310,311,5,108,0,0,311,312,5,101,0,0,312,
        313,5,84,0,0,313,314,5,101,0,0,314,315,5,109,0,0,315,395,5,112,0,
        0,316,317,5,99,0,0,317,318,5,111,0,0,318,319,5,111,0,0,319,320,5,
        108,0,0,320,321,5,101,0,0,321,395,5,114,0,0,322,323,5,97,0,0,323,
        324,5,98,0,0,324,325,5,115,0,0,325,326,5,111,0,0,326,327,5,108,0,
        0,327,328,5,117,0,0,328,329,5,116,0,0,329,330,5,101,0,0,330,331,
        5,80,0,0,331,332,5,111,0,0,332,333,5,115,0,0,333,334,5,105,0,0,334,
        335,5,116,0,0,335,336,5,105,0,0,336,337,5,111,0,0,337,338,5,110,
        0,0,338,339,5,105,0,0,339,340,5,110,0,0,340,395,5,103,0,0,341,342,
        5,102,0,0,342,343,5,105,0,0,343,344,5,108,0,0,344,345,5,108,0,0,
        345,346,5,101,0,0,346,347,5,100,0,0,347,348,5,67,0,0,348,349,5,105,
        0,0,349,350,5,114,0,0,350,351,5,99,0,0,351,352,5,108,0,0,352,395,
        5,101,0,0,353,354,5,100,0,0,354,355,5,114,0,0,355,356,5,97,0,0,356,
        357,5,119,0,0,357,358,5,76,0,0,358,359,5,101,0,0,359,360,5,116,0,
        0,360,361,5,116,0,0,361,362,5,101,0,0,362,395,5,114,0,0,363,364,
        5,109,0,0,364,365,5,111,0,0,365,366,5,118,0,0,366,367,5,101,0,0,
        367,368,5,86,0,0,368,369,5,101,0,0,369,370,5,114,0,0,370,371,5,116,
        0,0,371,372,5,105,0,0,372,373,5,99,0,0,373,374,5,97,0,0,374,375,
        5,108,0,0,375,376,5,108,0,0,376,395,5,121,0,0,377,378,5,115,0,0,
        378,379,5,113,0,0,379,380,5,117,0,0,380,381,5,97,0,0,381,382,5,114,
        0,0,382,395,5,101,0,0,383,384,5,110,0,0,384,385,5,101,0,0,385,386,
        5,120,0,0,386,387,5,116,0,0,387,388,5,83,0,0,388,389,5,117,0,0,389,
        390,5,114,0,0,390,391,5,102,0,0,391,392,5,97,0,0,392,393,5,99,0,
        0,393,395,5,101,0,0,394,219,1,0,0,0,394,226,1,0,0,0,394,230,1,0,
        0,0,394,234,1,0,0,0,394,239,1,0,0,0,394,246,1,0,0,0,394,256,1,0,
        0,0,394,262,1,0,0,0,394,266,1,0,0,0,394,277,1,0,0,0,394,283,1,0,
        0,0,394,287,1,0,0,0,394,296,1,0,0,0,394,304,1,0,0,0,394,316,1,0,
        0,0,394,322,1,0,0,0,394,341,1,0,0,0,394,353,1,0,0,0,394,363,1,0,
        0,0,394,377,1,0,0,0,394,383,1,0,0,0,395,74,1,0,0,0,396,400,7,1,0,
        0,397,399,7,2,0,0,398,397,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,
        0,400,401,1,0,0,0,401,76,1,0,0,0,402,400,1,0,0,0,403,405,5,45,0,
        0,404,403,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,408,7,3,0,
        0,407,406,1,0,0,0,408,409,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,
        0,410,417,1,0,0,0,411,413,5,46,0,0,412,414,7,3,0,0,413,412,1,0,0,
        0,414,415,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,
        0,417,411,1,0,0,0,417,418,1,0,0,0,418,78,1,0,0,0,419,421,7,4,0,0,
        420,419,1,0,0,0,421,422,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,
        423,424,1,0,0,0,424,425,6,39,0,0,425,80,1,0,0,0,426,430,5,39,0,0,
        427,429,8,5,0,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,
        430,431,1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,434,5,39,0,0,
        434,82,1,0,0,0,11,0,145,154,394,400,404,409,415,417,422,430,1,6,
        0,0
    ]

class OGCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ASSIGNMENT_OPERATOR = 1
    PLUS_OPERATOR = 2
    MINUS_OPERATOR = 3
    MULTIPLY_OPERATOR = 4
    DIVIDE_OPERATOR = 5
    MODULO_OPERATOR = 6
    INCREMENT_OPERATOR = 7
    DECREMENT_OPERATOR = 8
    EQUAL_OPERATOR = 9
    UNEQUAL_OPERATOR = 10
    LESSER_OPERATOR = 11
    GREATER_OPERATOR = 12
    LESSER_OR_EQUAL_OPERATOR = 13
    GREATER_OR_EQUAL_OPERATOR = 14
    AND_KEYWORD = 15
    OR_KEYWORD = 16
    BOOLEAN_TRUE = 17
    BOOLEAN_FALSE = 18
    COMMA_SEPARATOR = 19
    SEMICOLON_SEPARATOR = 20
    LINE_COMMENT = 21
    BLOCK_COMMENT = 22
    LEFT_BRACKET = 23
    RIGHT_BRACKET = 24
    LEFT_PARENTHESIS = 25
    RIGHT_PARENTHESIS = 26
    LEFT_BRACE = 27
    RIGHT_BRACE = 28
    FUNCTION_KEYWORD = 29
    LET_KEYWORD = 30
    REPEAT_KEYWORD = 31
    WHILE_KEYWORD = 32
    IF_KEYWORD = 33
    ELSE_KEYWORD = 34
    ELSEIF_KEYWORD = 35
    START_KEYWORD = 36
    FUNCTIONS_KEYWORDS = 37
    IDENTIFIER = 38
    NUMBER = 39
    WS = 40
    STRING = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'=='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'and'", "'or'", "'true'", 
            "'false'", "','", "';'", "'['", "']'", "'('", "')'", "'{'", 
            "'}'", "'function'", "'let'", "'repeat'", "'while'", "'if'", 
            "'else'", "'elseif'", "'start'" ]

    symbolicNames = [ "<INVALID>",
            "ASSIGNMENT_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", "MULTIPLY_OPERATOR", 
            "DIVIDE_OPERATOR", "MODULO_OPERATOR", "INCREMENT_OPERATOR", 
            "DECREMENT_OPERATOR", "EQUAL_OPERATOR", "UNEQUAL_OPERATOR", 
            "LESSER_OPERATOR", "GREATER_OPERATOR", "LESSER_OR_EQUAL_OPERATOR", 
            "GREATER_OR_EQUAL_OPERATOR", "AND_KEYWORD", "OR_KEYWORD", "BOOLEAN_TRUE", 
            "BOOLEAN_FALSE", "COMMA_SEPARATOR", "SEMICOLON_SEPARATOR", "LINE_COMMENT", 
            "BLOCK_COMMENT", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_PARENTHESIS", 
            "RIGHT_PARENTHESIS", "LEFT_BRACE", "RIGHT_BRACE", "FUNCTION_KEYWORD", 
            "LET_KEYWORD", "REPEAT_KEYWORD", "WHILE_KEYWORD", "IF_KEYWORD", 
            "ELSE_KEYWORD", "ELSEIF_KEYWORD", "START_KEYWORD", "FUNCTIONS_KEYWORDS", 
            "IDENTIFIER", "NUMBER", "WS", "STRING" ]

    ruleNames = [ "ASSIGNMENT_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", 
                  "MULTIPLY_OPERATOR", "DIVIDE_OPERATOR", "MODULO_OPERATOR", 
                  "INCREMENT_OPERATOR", "DECREMENT_OPERATOR", "EQUAL_OPERATOR", 
                  "UNEQUAL_OPERATOR", "LESSER_OPERATOR", "GREATER_OPERATOR", 
                  "LESSER_OR_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                  "AND_KEYWORD", "OR_KEYWORD", "BOOLEAN_TRUE", "BOOLEAN_FALSE", 
                  "COMMA_SEPARATOR", "SEMICOLON_SEPARATOR", "LINE_COMMENT", 
                  "BLOCK_COMMENT", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_PARENTHESIS", 
                  "RIGHT_PARENTHESIS", "LEFT_BRACE", "RIGHT_BRACE", "FUNCTION_KEYWORD", 
                  "LET_KEYWORD", "REPEAT_KEYWORD", "WHILE_KEYWORD", "IF_KEYWORD", 
                  "ELSE_KEYWORD", "ELSEIF_KEYWORD", "START_KEYWORD", "FUNCTIONS_KEYWORDS", 
                  "IDENTIFIER", "NUMBER", "WS", "STRING" ]

    grammarFileName = "OGCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


