# Generated from OGCode.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,425,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,
        9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,5,20,148,
        8,20,10,20,12,20,151,9,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,159,
        8,21,10,21,12,21,162,9,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,
        1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,
        1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,3,38,385,8,38,1,39,1,39,5,39,389,8,39,10,
        39,12,39,392,9,39,1,40,3,40,395,8,40,1,40,4,40,398,8,40,11,40,12,
        40,399,1,40,1,40,4,40,404,8,40,11,40,12,40,405,3,40,408,8,40,1,41,
        4,41,411,8,41,11,41,12,41,412,1,41,1,41,1,42,1,42,5,42,419,8,42,
        10,42,12,42,422,9,42,1,42,1,42,1,160,0,43,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,1,0,6,2,0,10,10,13,13,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,
        3,0,10,10,13,13,39,39,450,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,
        1,0,0,0,3,89,1,0,0,0,5,91,1,0,0,0,7,93,1,0,0,0,9,95,1,0,0,0,11,97,
        1,0,0,0,13,99,1,0,0,0,15,102,1,0,0,0,17,105,1,0,0,0,19,108,1,0,0,
        0,21,111,1,0,0,0,23,113,1,0,0,0,25,115,1,0,0,0,27,118,1,0,0,0,29,
        121,1,0,0,0,31,125,1,0,0,0,33,128,1,0,0,0,35,133,1,0,0,0,37,139,
        1,0,0,0,39,141,1,0,0,0,41,143,1,0,0,0,43,154,1,0,0,0,45,168,1,0,
        0,0,47,170,1,0,0,0,49,172,1,0,0,0,51,174,1,0,0,0,53,176,1,0,0,0,
        55,178,1,0,0,0,57,180,1,0,0,0,59,189,1,0,0,0,61,193,1,0,0,0,63,200,
        1,0,0,0,65,206,1,0,0,0,67,209,1,0,0,0,69,214,1,0,0,0,71,221,1,0,
        0,0,73,228,1,0,0,0,75,234,1,0,0,0,77,384,1,0,0,0,79,386,1,0,0,0,
        81,394,1,0,0,0,83,410,1,0,0,0,85,416,1,0,0,0,87,88,5,61,0,0,88,2,
        1,0,0,0,89,90,5,43,0,0,90,4,1,0,0,0,91,92,5,45,0,0,92,6,1,0,0,0,
        93,94,5,42,0,0,94,8,1,0,0,0,95,96,5,47,0,0,96,10,1,0,0,0,97,98,5,
        37,0,0,98,12,1,0,0,0,99,100,5,43,0,0,100,101,5,43,0,0,101,14,1,0,
        0,0,102,103,5,45,0,0,103,104,5,45,0,0,104,16,1,0,0,0,105,106,5,61,
        0,0,106,107,5,61,0,0,107,18,1,0,0,0,108,109,5,33,0,0,109,110,5,61,
        0,0,110,20,1,0,0,0,111,112,5,60,0,0,112,22,1,0,0,0,113,114,5,62,
        0,0,114,24,1,0,0,0,115,116,5,60,0,0,116,117,5,61,0,0,117,26,1,0,
        0,0,118,119,5,62,0,0,119,120,5,61,0,0,120,28,1,0,0,0,121,122,5,97,
        0,0,122,123,5,110,0,0,123,124,5,100,0,0,124,30,1,0,0,0,125,126,5,
        111,0,0,126,127,5,114,0,0,127,32,1,0,0,0,128,129,5,84,0,0,129,130,
        5,114,0,0,130,131,5,117,0,0,131,132,5,101,0,0,132,34,1,0,0,0,133,
        134,5,70,0,0,134,135,5,97,0,0,135,136,5,108,0,0,136,137,5,115,0,
        0,137,138,5,101,0,0,138,36,1,0,0,0,139,140,5,44,0,0,140,38,1,0,0,
        0,141,142,5,59,0,0,142,40,1,0,0,0,143,144,5,47,0,0,144,145,5,47,
        0,0,145,149,1,0,0,0,146,148,8,0,0,0,147,146,1,0,0,0,148,151,1,0,
        0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,149,1,0,
        0,0,152,153,6,20,0,0,153,42,1,0,0,0,154,155,5,47,0,0,155,156,5,42,
        0,0,156,160,1,0,0,0,157,159,9,0,0,0,158,157,1,0,0,0,159,162,1,0,
        0,0,160,161,1,0,0,0,160,158,1,0,0,0,161,163,1,0,0,0,162,160,1,0,
        0,0,163,164,5,42,0,0,164,165,5,47,0,0,165,166,1,0,0,0,166,167,6,
        21,0,0,167,44,1,0,0,0,168,169,5,91,0,0,169,46,1,0,0,0,170,171,5,
        93,0,0,171,48,1,0,0,0,172,173,5,40,0,0,173,50,1,0,0,0,174,175,5,
        41,0,0,175,52,1,0,0,0,176,177,5,123,0,0,177,54,1,0,0,0,178,179,5,
        125,0,0,179,56,1,0,0,0,180,181,5,102,0,0,181,182,5,117,0,0,182,183,
        5,110,0,0,183,184,5,99,0,0,184,185,5,116,0,0,185,186,5,105,0,0,186,
        187,5,111,0,0,187,188,5,110,0,0,188,58,1,0,0,0,189,190,5,108,0,0,
        190,191,5,101,0,0,191,192,5,116,0,0,192,60,1,0,0,0,193,194,5,114,
        0,0,194,195,5,101,0,0,195,196,5,112,0,0,196,197,5,101,0,0,197,198,
        5,97,0,0,198,199,5,116,0,0,199,62,1,0,0,0,200,201,5,119,0,0,201,
        202,5,104,0,0,202,203,5,105,0,0,203,204,5,108,0,0,204,205,5,101,
        0,0,205,64,1,0,0,0,206,207,5,105,0,0,207,208,5,102,0,0,208,66,1,
        0,0,0,209,210,5,101,0,0,210,211,5,108,0,0,211,212,5,115,0,0,212,
        213,5,101,0,0,213,68,1,0,0,0,214,215,5,101,0,0,215,216,5,108,0,0,
        216,217,5,115,0,0,217,218,5,101,0,0,218,219,5,105,0,0,219,220,5,
        102,0,0,220,70,1,0,0,0,221,222,5,114,0,0,222,223,5,101,0,0,223,224,
        5,116,0,0,224,225,5,117,0,0,225,226,5,114,0,0,226,227,5,110,0,0,
        227,72,1,0,0,0,228,229,5,98,0,0,229,230,5,114,0,0,230,231,5,101,
        0,0,231,232,5,97,0,0,232,233,5,107,0,0,233,74,1,0,0,0,234,235,5,
        115,0,0,235,236,5,116,0,0,236,237,5,97,0,0,237,238,5,114,0,0,238,
        239,5,116,0,0,239,76,1,0,0,0,240,241,5,102,0,0,241,242,5,111,0,0,
        242,243,5,114,0,0,243,244,5,119,0,0,244,245,5,97,0,0,245,246,5,114,
        0,0,246,385,5,100,0,0,247,248,5,109,0,0,248,249,5,111,0,0,249,250,
        5,118,0,0,250,385,5,101,0,0,251,252,5,116,0,0,252,253,5,117,0,0,
        253,254,5,114,0,0,254,385,5,110,0,0,255,256,5,112,0,0,256,257,5,
        101,0,0,257,258,5,110,0,0,258,259,5,85,0,0,259,385,5,112,0,0,260,
        261,5,112,0,0,261,262,5,101,0,0,262,263,5,110,0,0,263,264,5,68,0,
        0,264,265,5,111,0,0,265,266,5,119,0,0,266,385,5,110,0,0,267,268,
        5,115,0,0,268,269,5,101,0,0,269,270,5,116,0,0,270,271,5,83,0,0,271,
        272,5,112,0,0,272,273,5,101,0,0,273,274,5,101,0,0,274,385,5,100,
        0,0,275,276,5,115,0,0,276,277,5,101,0,0,277,278,5,116,0,0,278,279,
        5,80,0,0,279,280,5,101,0,0,280,281,5,110,0,0,281,282,5,84,0,0,282,
        283,5,101,0,0,283,284,5,109,0,0,284,385,5,112,0,0,285,286,5,99,0,
        0,286,287,5,105,0,0,287,288,5,114,0,0,288,289,5,99,0,0,289,290,5,
        108,0,0,290,385,5,101,0,0,291,292,5,119,0,0,292,293,5,97,0,0,293,
        294,5,105,0,0,294,385,5,116,0,0,295,296,5,99,0,0,296,297,5,108,0,
        0,297,298,5,101,0,0,298,299,5,97,0,0,299,300,5,110,0,0,300,301,5,
        78,0,0,301,302,5,111,0,0,302,303,5,122,0,0,303,304,5,122,0,0,304,
        305,5,108,0,0,305,385,5,101,0,0,306,307,5,103,0,0,307,308,5,114,
        0,0,308,309,5,111,0,0,309,310,5,117,0,0,310,311,5,110,0,0,311,385,
        5,100,0,0,312,313,5,117,0,0,313,314,5,110,0,0,314,315,5,105,0,0,
        315,385,5,116,0,0,316,317,5,97,0,0,317,318,5,117,0,0,318,319,5,116,
        0,0,319,320,5,111,0,0,320,321,5,76,0,0,321,322,5,101,0,0,322,323,
        5,118,0,0,323,324,5,101,0,0,324,385,5,108,0,0,325,326,5,115,0,0,
        326,327,5,101,0,0,327,328,5,116,0,0,328,329,5,84,0,0,329,330,5,97,
        0,0,330,331,5,98,0,0,331,332,5,108,0,0,332,333,5,101,0,0,333,334,
        5,84,0,0,334,335,5,101,0,0,335,336,5,109,0,0,336,385,5,112,0,0,337,
        338,5,99,0,0,338,339,5,111,0,0,339,340,5,111,0,0,340,341,5,108,0,
        0,341,342,5,101,0,0,342,385,5,114,0,0,343,344,5,97,0,0,344,345,5,
        98,0,0,345,346,5,115,0,0,346,347,5,111,0,0,347,348,5,108,0,0,348,
        349,5,117,0,0,349,350,5,116,0,0,350,351,5,101,0,0,351,352,5,80,0,
        0,352,353,5,111,0,0,353,354,5,115,0,0,354,355,5,105,0,0,355,356,
        5,116,0,0,356,357,5,105,0,0,357,358,5,111,0,0,358,359,5,110,0,0,
        359,360,5,105,0,0,360,361,5,110,0,0,361,385,5,103,0,0,362,363,5,
        102,0,0,363,364,5,105,0,0,364,365,5,108,0,0,365,366,5,108,0,0,366,
        367,5,101,0,0,367,368,5,100,0,0,368,369,5,67,0,0,369,370,5,105,0,
        0,370,371,5,114,0,0,371,372,5,99,0,0,372,373,5,108,0,0,373,385,5,
        101,0,0,374,375,5,100,0,0,375,376,5,114,0,0,376,377,5,97,0,0,377,
        378,5,119,0,0,378,379,5,76,0,0,379,380,5,101,0,0,380,381,5,116,0,
        0,381,382,5,116,0,0,382,383,5,101,0,0,383,385,5,114,0,0,384,240,
        1,0,0,0,384,247,1,0,0,0,384,251,1,0,0,0,384,255,1,0,0,0,384,260,
        1,0,0,0,384,267,1,0,0,0,384,275,1,0,0,0,384,285,1,0,0,0,384,291,
        1,0,0,0,384,295,1,0,0,0,384,306,1,0,0,0,384,312,1,0,0,0,384,316,
        1,0,0,0,384,325,1,0,0,0,384,337,1,0,0,0,384,343,1,0,0,0,384,362,
        1,0,0,0,384,374,1,0,0,0,385,78,1,0,0,0,386,390,7,1,0,0,387,389,7,
        2,0,0,388,387,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,
        0,0,0,391,80,1,0,0,0,392,390,1,0,0,0,393,395,5,45,0,0,394,393,1,
        0,0,0,394,395,1,0,0,0,395,397,1,0,0,0,396,398,7,3,0,0,397,396,1,
        0,0,0,398,399,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,407,1,
        0,0,0,401,403,5,46,0,0,402,404,7,3,0,0,403,402,1,0,0,0,404,405,1,
        0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,401,1,
        0,0,0,407,408,1,0,0,0,408,82,1,0,0,0,409,411,7,4,0,0,410,409,1,0,
        0,0,411,412,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,414,1,0,
        0,0,414,415,6,41,0,0,415,84,1,0,0,0,416,420,5,39,0,0,417,419,8,5,
        0,0,418,417,1,0,0,0,419,422,1,0,0,0,420,418,1,0,0,0,420,421,1,0,
        0,0,421,423,1,0,0,0,422,420,1,0,0,0,423,424,5,39,0,0,424,86,1,0,
        0,0,11,0,149,160,384,390,394,399,405,407,412,420,1,6,0,0
    ]

class OGCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ASSIGNMENT_OPERATOR = 1
    PLUS_OPERATOR = 2
    MINUS_OPERATOR = 3
    MULTIPLY_OPERATOR = 4
    DIVIDE_OPERATOR = 5
    MODULO_OPERATOR = 6
    INCREMENT_OPERATOR = 7
    DECREMENT_OPERATOR = 8
    EQUAL_OPERATOR = 9
    UNEQUAL_OPERATOR = 10
    LESSER_OPERATOR = 11
    GREATER_OPERATOR = 12
    LESSER_OR_EQUAL_OPERATOR = 13
    GREATER_OR_EQUAL_OPERATOR = 14
    AND_KEYWORD = 15
    OR_KEYWORD = 16
    BOOLEAN_TRUE = 17
    BOOLEAN_FALSE = 18
    COMMA_SEPARATOR = 19
    SEMICOLON_SEPARATOR = 20
    LINE_COMMENT = 21
    BLOCK_COMMENT = 22
    LEFT_BRACKET = 23
    RIGHT_BRACKET = 24
    LEFT_PARENTHESIS = 25
    RIGHT_PARENTHESIS = 26
    LEFT_BRACE = 27
    RIGHT_BRACE = 28
    FUNCTION_KEYWORD = 29
    LET_KEYWORD = 30
    REPEAT_KEYWORD = 31
    WHILE_KEYWORD = 32
    IF_KEYWORD = 33
    ELSE_KEYWORD = 34
    ELSEIF_KEYWORD = 35
    RETURN_KEYWORD = 36
    BREAK_KEYWORD = 37
    START_KEYWORD = 38
    FUNCTIONS_KEYWORDS = 39
    IDENTIFIER = 40
    NUMBER = 41
    WS = 42
    STRING = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'=='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'and'", "'or'", "'True'", 
            "'False'", "','", "';'", "'['", "']'", "'('", "')'", "'{'", 
            "'}'", "'function'", "'let'", "'repeat'", "'while'", "'if'", 
            "'else'", "'elseif'", "'return'", "'break'", "'start'" ]

    symbolicNames = [ "<INVALID>",
            "ASSIGNMENT_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", "MULTIPLY_OPERATOR", 
            "DIVIDE_OPERATOR", "MODULO_OPERATOR", "INCREMENT_OPERATOR", 
            "DECREMENT_OPERATOR", "EQUAL_OPERATOR", "UNEQUAL_OPERATOR", 
            "LESSER_OPERATOR", "GREATER_OPERATOR", "LESSER_OR_EQUAL_OPERATOR", 
            "GREATER_OR_EQUAL_OPERATOR", "AND_KEYWORD", "OR_KEYWORD", "BOOLEAN_TRUE", 
            "BOOLEAN_FALSE", "COMMA_SEPARATOR", "SEMICOLON_SEPARATOR", "LINE_COMMENT", 
            "BLOCK_COMMENT", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_PARENTHESIS", 
            "RIGHT_PARENTHESIS", "LEFT_BRACE", "RIGHT_BRACE", "FUNCTION_KEYWORD", 
            "LET_KEYWORD", "REPEAT_KEYWORD", "WHILE_KEYWORD", "IF_KEYWORD", 
            "ELSE_KEYWORD", "ELSEIF_KEYWORD", "RETURN_KEYWORD", "BREAK_KEYWORD", 
            "START_KEYWORD", "FUNCTIONS_KEYWORDS", "IDENTIFIER", "NUMBER", 
            "WS", "STRING" ]

    ruleNames = [ "ASSIGNMENT_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", 
                  "MULTIPLY_OPERATOR", "DIVIDE_OPERATOR", "MODULO_OPERATOR", 
                  "INCREMENT_OPERATOR", "DECREMENT_OPERATOR", "EQUAL_OPERATOR", 
                  "UNEQUAL_OPERATOR", "LESSER_OPERATOR", "GREATER_OPERATOR", 
                  "LESSER_OR_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                  "AND_KEYWORD", "OR_KEYWORD", "BOOLEAN_TRUE", "BOOLEAN_FALSE", 
                  "COMMA_SEPARATOR", "SEMICOLON_SEPARATOR", "LINE_COMMENT", 
                  "BLOCK_COMMENT", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_PARENTHESIS", 
                  "RIGHT_PARENTHESIS", "LEFT_BRACE", "RIGHT_BRACE", "FUNCTION_KEYWORD", 
                  "LET_KEYWORD", "REPEAT_KEYWORD", "WHILE_KEYWORD", "IF_KEYWORD", 
                  "ELSE_KEYWORD", "ELSEIF_KEYWORD", "RETURN_KEYWORD", "BREAK_KEYWORD", 
                  "START_KEYWORD", "FUNCTIONS_KEYWORDS", "IDENTIFIER", "NUMBER", 
                  "WS", "STRING" ]

    grammarFileName = "OGCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


